---
// Import section components
import MainLayout from "@/layouts/MainLayout.astro";
import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro";
import { Image } from "astro:assets";
import { SITE } from "@data/constants";
import { sanityClient } from "sanity:client";
import { urlForImage } from "@/sanity/lib/urlForImage";
import { whatsapplink } from "@data/constants";
import Carousel from "@/components/sections/landing/Carousel.astro";

// Global declaration for gsap animation library
declare global {
  interface Window {
    gsap: any;
  }
}
interface Product {
  _id: string;
  _type: "producto";
  nombre: string;
  descripcion_corta: string;
  imagen: string;
  alt: string;
  imagenes_adicionales?: {
    imagen: {
      _type: "image";
      asset: {
        _ref: string;
        _type: "reference";
      };
    };
    alt: string;
  }[];
  nombre_descripcion: string;
  descripcion_larga: string;
  caracteristicas?: {
    title: string;
    description: string;
  }[];
  slug: {
    _type: "slug";
    current: string;
  };
  category: {
    _type: "reference";
    _ref: string;
    slug: {
      _type: "slug";
      current: string;
    };
  };
}

interface Props {
  product: Product;
}

const { product } = Astro.props;

const pageTitle: string = `${product.nombre} | ${SITE.title}`;

export async function getStaticPaths() {
  const categoryQuery = `*[_type == "product_hardware"]{
    ...,
    category-> {
        slug
      }
  }`;


  const categories = await sanityClient.fetch(categoryQuery);
  return categories.map((category: any) => {
    const data = {
      params: {
        categoria: category.category.slug.current,
        producto: category.slug.current,
      },
      props: {
        product: { ...category, imagen: urlForImage(category.imagen).url() },
      },
    };
    return data;
  });
}
const carouselImages = product.imagenes_adicionales
  ? product.imagenes_adicionales.map((img) => urlForImage(img.imagen).url())
  : [];
const carouselAlts = product.imagenes_adicionales
  ? product.imagenes_adicionales.map((img) => img.alt)
  : [];
const whatsappMessage =
  whatsapplink +
  `?text=Hola, me interesa el producto [${product.nombre}] de la categoría [${product.category.slug.current}]. ¿Me podrías dar más información?`;
---

<MainLayout title={pageTitle}>
  <div id="overlay" class="fixed inset-0 bg-neutral-200 dark:bg-neutral-800">
  </div>

  <section
    class="mx-auto flex max-w-[85rem] flex-col px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full"
  >
    <div
      class="flex flex-col items-center justify-around space-y-4 sm:flex-row sm:space-y-0"
    >
      <div id="fadeInUp">
        <h1
          class="block text-4xl font-bold tracking-tighter text-neutral-800 dark:text-neutral-200 sm:text-5xl md:text-6xl lg:text-7xl"
        >
          {product.nombre}
        </h1>
        <p class="text-lg text-neutral-600 dark:text-neutral-400">
          {product.descripcion_corta}
        </p>
      </div>
      
      {
        product.imagenes_adicionales ? (
          <div class="h-96 min-w-96 max-h-[500px] w-auto max-w-[500px] mx-auto">
            <Carousel src={[product.imagen, ...carouselImages]} alt={[product.alt, ...carouselAlts]} />
          </div>
        ) : (
          <Image
            id="fadeInMoveRight"
            src={product.imagen}
            class="h-full max-h-[500px] w-full max-w-[500px] rounded-lg object-cover object-center shadow-lg"
            alt={product.alt}
            loading={"eager"}
            inferSize={true}
          />
        )
      }
    </div>
  </section>

  <div class="mx-auto max-w-[85rem] px-4 pt-10 sm:px-6 lg:px-8 lg:pt-14">
    <div class="mt-12 md:mt-16">
      <div id="tabs-with-card-1" role="tabpanel">
        <div class="mx-auto max-w-[85rem] px-4 pb-10 sm:px-6 lg:px-8 lg:pb-14">
          <div class="grid gap-12 md:grid-cols-2">
            <div class="lg:w-3/4">
              <h2
                class="text-balance text-3xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 md:leading-tight lg:text-4xl"
              >
                {product.nombre_descripcion}
              </h2>
              <p
                class="mt-3 text-pretty text-neutral-600 dark:text-neutral-400"
              >
                {product.descripcion_larga}
              </p>
              <p class="mt-5">
                <PrimaryCTA title={"Lo quiero"} url={whatsappMessage} />
              </p>
            </div>

            <div class="space-y-6 lg:space-y-10">
              {
                product.caracteristicas &&
                  product.caracteristicas.map((list) => (
                    <div class="flex">
                      <div>
                        <h3 class="text-base font-bold text-neutral-800 dark:text-neutral-200 sm:text-lg">
                          {list.title}
                        </h3>
                        <p class="mt-1 text-neutral-600 dark:text-neutral-400">
                          {list.description}
                        </p>
                      </div>
                    </div>
                  ))
              }
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    import { gsap } from "gsap";

    type AnimationSettings = {
      autoAlpha?: number;
      y?: number;
      x?: number;
      willChange?: string;
    };

    function setElementAnimationDefaults(
      id: string,
      settings: AnimationSettings
    ) {
      gsap.set(id, settings);
    }

    setElementAnimationDefaults("#fadeText", {
      autoAlpha: 0,
      y: 50,
      willChange: "transform, opacity",
    });

    setElementAnimationDefaults("#fadeInUp", {
      autoAlpha: 0,
      y: 50,
      willChange: "transform, opacity",
    });

    setElementAnimationDefaults("#fadeInMoveRight", {
      autoAlpha: 0,
      x: 300,
      willChange: "transform, opacity",
    });

    let timeline = gsap.timeline({ defaults: { overwrite: "auto" } });

    timeline.to("#fadeText", {
      duration: 1.5,
      autoAlpha: 1,
      y: 0,
      delay: 1,
      ease: "power2.out",
    });

    timeline.to(
      "#fadeInUp",
      { duration: 1.5, autoAlpha: 1, y: 0, ease: "power2.out" },
      "-=1.2"
    );

    timeline.to(
      "#fadeInMoveRight",
      { duration: 1.5, autoAlpha: 1, x: 0, ease: "power2.inOut" },
      "-=1.4"
    );

    timeline.to("#overlay", { duration: 1, autoAlpha: 0, delay: 0.2 });
  </script>
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      function setButtonInactive(btn: any, activeButton: any) {
        if (btn !== activeButton) {
          btn.classList.remove(
            "active",
            "bg-neutral-100",
            "hover:border-transparent",
            "dark:bg-white/[.05]"
          );

          const tabId = btn.getAttribute("data-target");
          if (tabId) {
            const contentElement = document.querySelector(tabId);
            if (contentElement) {
              contentElement.classList.add("hidden");
            }
          }

          changeHeadingStyle(
            btn,
            ["text-neutral-800", "dark:text-neutral-200"],
            ["text-orange-400", "dark:text-orange-300"]
          );
        }
      }

      function activateButton(button: any) {
        button.classList.add(
          "active",
          "bg-neutral-100",
          ",hover:border-transparent",
          "dark:bg-white/[.05]"
        );

        const tabId = button.getAttribute("data-target");
        if (tabId) {
          const contentElementToShow = document.querySelector(tabId);
          if (contentElementToShow) {
            contentElementToShow.classList.remove("hidden");
          }
        }

        changeHeadingStyle(
          button,
          ["text-orange-400", "dark:text-orange-300"],
          ["text-neutral-800", "dark:text-neutral-200"]
        );
      }

      function changeHeadingStyle(
        button: any,
        addClasses: any,
        removeClasses: any
      ) {
        let heading = button.querySelector("span");
        if (heading) {
          heading.classList.remove(...removeClasses);
          heading.classList.add(...addClasses);
        }
      }

      const tabButtons = document.querySelectorAll("[data-target]");

      if (tabButtons.length > 0) {
        changeHeadingStyle(
          tabButtons[0],
          ["text-orange-400", "dark:text-orange-300"],
          []
        );
      }

      tabButtons.forEach((button) => {
        button.addEventListener("click", () => {
          tabButtons.forEach((btn) => setButtonInactive(btn, button));
          activateButton(button);
        });
      });
    });
  </script>
</MainLayout>
